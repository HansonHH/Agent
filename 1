#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2016 Xin Han <hxinhan@gmail.com>
#
'''
A file to initiate databse
'''

import ConfigParser
from models import *
import sqlalchemy.exc
import ast
import uuid

config = ConfigParser.ConfigParser()
config.read('agent.conf')
DATABASE_NAME = config.get('Database', 'DATABASE_NAME')
DATABASE_USERNAME = config.get('Database', 'DATABASE_USERNAME')
DATABASE_PASSWORD = config.get('Database', 'DATABASE_PASSWORD')
SITES = ast.literal_eval(config.get('Clouds','sites'))
AGENT_SITE_NAME = config.get('Agent', 'site')
AGENT_SITE_IP = SITES[AGENT_SITE_NAME]

agentDB_engine = create_engine('mysql+mysqldb://%s:%s@localhost/%s'%(DATABASE_USERNAME, DATABASE_PASSWORD, DATABASE_NAME), echo = True)
#agentDB_engine = create_engine('mysql+mysqldb://%s:%s@localhost/%s'%(DATABASE_USERNAME, DATABASE_PASSWORD, DATABASE_NAME), pool_recycle=3600, echo = True)

# Create tables in database
def create_tables():
    try:
        Base.metadata.create_all(agentDB_engine)
    except exc:
        print exc.message


# Synchorize agent table with glance (images talbe in glance DB) in terms of uuid
def Sync_Image():
   
    # Read uuid of images from glance databse
    glance_engine = create_engine('mysql+mysqldb://%s:%s@localhost/glance'%(DATABASE_USERNAME, DATABASE_PASSWORD), echo = True)
    
    metadata = MetaData(glance_engine)
    glance_images = Table('images', metadata, autoload = True)
    mapper(GlanceImage, glance_images)
    
    DBSession = sessionmaker(bind = glance_engine)
    R_session = DBSession()

    GlanceImage_Res = R_session.query(GlanceImage).all()
    R_session.close()

    # Write to image table of agent DB 
    # Create session of image table of agetn DB
    DBSession = sessionmaker(bind = agentDB_engine)
    W_session = DBSession()
    
    for image in GlanceImage_Res:
        
        # Synchorize image uuid to data table of agent 
        new_image = Image(uuid_agent = uuid.uuid4(), uuid_cloud = image.id, cloud_name = AGENT_SITE_NAME, cloud_address = AGENT_SITE_IP)

        W_session.add(new_image)
        
    # Commit session    
    W_session.commit()
    '''
        except sqlalchemy.exc.IntegrityError, exc:
            reason = exc.message
            if reason.endswith('is not unique'):
                print "%s already exists" % exc.params[0]
                W_session.rollback()
    '''
   # Close session
    W_session.close()


# Synchorize agent table with flavor table (instance_types table in nova DB) in terms of uuid
def Sync_Flavor():
   
    print '*' * 100

    # Read uuid of flavors from nova databse
    flavor_engine = create_engine('mysql+mysqldb://%s:%s@localhost/nova'%(DATABASE_USERNAME, DATABASE_PASSWORD), echo = True)
    
    metadata = MetaData(flavor_engine)
    nova_flavors = Table('instance_types', metadata, autoload = True)
    mapper(NovaFlavor, nova_flavors)
    
    DBSession = sessionmaker(bind = flavor_engine)
    R_session = DBSession()

    NovaFlavor_Res = R_session.query(NovaFlavor).all()
    R_session.close()

    # Write to image table of agent DB 
    # Create session of image table of agetn DB
    DBSession = sessionmaker(bind = agentDB_engine)
    W_session = DBSession()
    
    for flavor in NovaFlavor_Res:
        
        # Synchorize flavor uuid to data table of agent 
        new_flavor = Flavor(uuid_agent = uuid.uuid4(), uuid_cloud = flavor.flavorid, cloud_name = AGENT_SITE_NAME, cloud_address = AGENT_SITE_IP)

        W_session.add(new_flavor)

    # Commit session    
    W_session.commit()

   # Close session
    W_session.close()


# Synchorize agent table with network table (networks table in neutron DB) in terms of uuid
def Sync_Network():
   
    # Read uuid of networks from nova databse
    network_engine = create_engine('mysql+mysqldb://%s:%s@localhost/neutron'%(DATABASE_USERNAME, DATABASE_PASSWORD), echo = True)
    
    metadata = MetaData(network_engine)
    neutron_network = Table('networks', metadata, autoload = True)
    mapper(NeutronNetwork, neutron_network)
    
    DBSession = sessionmaker(bind = network_engine)
    R_session = DBSession()

    NeutronNetwork_Res = R_session.query(NeutronNetwork).all()
    R_session.close()

    # Write to subnet table of agent DB 
    # Create session of subnet table of agetn DB
    DBSession = sessionmaker(bind = agentDB_engine)
    W_session = DBSession()
    
    for subnet in NeutronNetwork_Res:
        
        # Synchorize subnet uuid to data table of agent 
        new_network = Network(uuid_agent = uuid.uuid4(), uuid_cloud = subnet.id, cloud_name = AGENT_SITE_NAME, cloud_address = AGENT_SITE_IP)
        # Add instance to session
        W_session.add(new_network)

   
    # Commit session    
    W_session.commit()
    
    # Close session
    W_session.close()


# Synchorize agent table with subnet table (subnets table in neutron DB) in terms of uuid
def Sync_Subnet():
   
    # Read uuid of subnets from nova databse
    subnet_engine = create_engine('mysql+mysqldb://%s:%s@localhost/neutron'%(DATABASE_USERNAME, DATABASE_PASSWORD), echo = True)
    
    metadata = MetaData(subnet_engine)
    neutron_subnet = Table('subnets', metadata, autoload = True)
    mapper(NeutronSubnet, neutron_subnet)
    
    DBSession = sessionmaker(bind = subnet_engine)
    R_session = DBSession()

    NeutronSubnet_Res = R_session.query(NeutronSubnet).all()
    R_session.close()

    # Write to subnet table of agent DB 
    # Create session of subnet table of agetn DB
    DBSession = sessionmaker(bind = agentDB_engine)
    W_session = DBSession()
    
    for subnet in NeutronSubnet_Res:
        
        # Synchorize subnet uuid to data table of agent 
        try:
            new_subnet = Subnet(uuid_agent = uuid.uuid4(), uuid_cloud = subnet.id, cloud_name = AGENT_SITE_NAME, cloud_address = AGENT_SITE_IP)

            W_session.add(new_subnet)
            W_session.commit()

        except sqlalchemy.exc.IntegrityError, exc:
            reason = exc.message
            if reason.endswith('is not unique'):
                print "%s already exists" % exc.params[0]
                W_session.rollback()
   
   # Close session
    W_session.close()
    


if __name__ == '__main__':
    create_tables()
    Sync_Image()
    #Sync_Flavor()
    #Sync_Network()
    #Sync_Subnet()
